#!/usr/bin/env ruby
# vi: set filetype=ruby fileencoding=UTF-8 shiftwidth=2 tabstop=2 expandtab

PRO_DEBUG = false

require "pro"
require "yaml"
require "pry" if PRO_DEBUG

HELP = <<END
pro is a command to help you manage your git repositories.

Base Directory ==========
pro works from a base directory for efficiency.
This is the folder that contains all your other git repositories;
they don't have to be at the base level, just somewhere down the tree.

To set the base directory set the PRO_BASE environment variable or make
a ~/.proBase file containing the path. The .proBase file can contain many lines
each with a path to a folder to search. Pro will search the path in the PRO_BASE
variable as well as all paths in the .proBase file. If neither exists then the home
directory will be used.

Commands ===============
pro search <query> - prints path of git repo that matches query.
pro status - prints a list of all repos with uncommitted or unpushed changes.
pro status <name> - prints the output of 'git status' on the repo.
pro run - prompts for a command to run in all git repos.
pro run <command> - runs the given command in all git repos.
pro install - Install the pro cd command. cd to a directory by fuzzy git repo matching.
pro help - display help

CD Command ============
You can use the 'pro install' command to install a wrapper shell function that allows
you to cd to git repositories in your Pro Base wherever you are based on fuzzy matching.

Just running 'pd' cd's to the pro base.

Example:

  ~/randomFolder/ $ pd pro
  pro/ $ pwd
  /Users/tristan/Box/Dev/Projects/pro
  pro/ $ pd
  Dev/ $ pwd
  /Users/tristan/Box/Dev

END

command = ARGV.shift || 'help'

index = Pro::Indexer.new.index

binding.pry if PRO_DEBUG

case command
when 'search'
  puts Pro.find_repo(ARGV.first,index)
when 'install'
  Pro.install_cd
when 'list'
  Pro.list_repos(index)
when 'status'
  if ARGV.first
    path = Pro.find_repo(ARGV.first,index)
    Dir.chdir(path) do
      puts `git status`
    end
  else
    Pro.status(index)
  end
when 'run'
  unless ARGV.empty?
    command = ARGV.join(" ")
  else
    print "Command: "
    command = STDIN.gets.chomp
  end
  Pro.run_command(command,index)
when 'help'
  puts HELP
when '-v'
  puts "Pro version #{Pro::VERSION} by Tristan Hume and contributors.\nhttp://github.com/trishume/pro"
end

